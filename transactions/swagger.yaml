swagger: "2.0"
info:
  version: "1.0.0"
  title: "Title Here"
  description: "Descriptoin here."
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "hjkelly@gmail.com"
  license:
    name: "MIT License"
    url: "https://opensource.org/licenses/MIT"
host: "petstore.swagger.io"
basePath: "/v1"
tags:
- name: "transactions"
  description: "Everything about your Pets"
schemes:
- "http"
paths:
  /transactions:
    get:
      tags:
      - "transactions"
      summary: "List my transactions"
      description: "Returns an array, possibly cut off for the sake of response size. See Link header for more info."
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Transaction"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
      security:
      - api_key: []
    post:
      tags:
      - "transactions"
      summary: "Add a new pet to the store"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Pet object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Transaction"
      responses:
        405:
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /transactions/{petId}:
    get:
      tags:
      - "transactions"
      summary: "Find pet by ID"
      description: "Returns a single pet"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Transaction"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
      security:
      - api_key: []
    post:
      tags:
      - "transactions"
      summary: "Updates a pet in the store with form data"
      description: ""
      operationId: "updatePetWithForm"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        405:
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    delete:
      tags:
      - "transactions"
      summary: "Deletes a pet"
      description: ""
      operationId: "deletePet"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "petId"
        in: "path"
        description: "Pet id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  Categorization:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
      amount:
        type: "number"
  Transaction:
    type: "object"
    required:
    - "id"
    - "description"
    - "amount"
    - "date"
    properties:
      id:
        type: "string"
        format: "uuid"
      description:
        type: "string"
      amount:
        type: "number"
      date:
        type: "string"
        format: "date"
      notes:
        type: "string"
      categorizations:
        type: "array"
        items:
          $ref: "#/definitions/Categorization"
